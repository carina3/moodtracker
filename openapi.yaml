openapi: 3.0.1
info:
  title: MoodTracker
  description: 'An application used to track your mood and analyze changes over time. 
  Built with Spring Boot, MySQL and Docker. 
  This project is intended as private project to learn the basics of Spring Boot.'
  contact:
    email: carwalk@protonmail.com
  license:
    name: MIT License (c) 2021
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Source code for project
  url: https://gitlab.com/carwalk/moodtracker
servers:
- url: http://localhost:8080/
tags:
- name: mood-entries
  description: Information about your mood
- name: search
  description: Search for specific entries
paths:
    
  /api/mood-entries:
    get:
        tags:
        - mood-entries
        summary: Retrieve all mood entries from database
        operationId: getAllEntries
        responses:
          "200":
            description: "Successful operation"
            content:
              application/schema:
                schema:
                  $ref: '#/components/schemas/ArrayOfMoodEntries'
          "400":
            description: "Invalid something something"
    post:
      tags:
      - mood-entries
      summary: Add a new mood entry to the database
      operationId: addMoodEntry
      requestBody:
        description: MoodEntry object that needs to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoodEntry'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
  /api/mood-entries/{id}:
    get:
      tags:
      - mood-entries
      summary: Retrieve entry with ID id from database
      operationId: findById
      parameters:
      - name: id
        in: path
        description: The entry id
        required: true
        schema:
          type: number
      responses:
        "200":
          description: "Successful operation"
          content:
            application/schema:
              schema:
                $ref: '#/components/schemas/ArrayOfMoodEntries'
        "400":
          description: "Invalid something somethinng"
    put:
      tags:
      - mood-entries
      summary: Update entry with ID id from database
      operationId: updateById
      parameters:
      - name: id
        in: path
        description: The entry id
        required: true
        schema:
          type: number
      responses:
        "200":
          description: "Successful operation"
          content:
            application/schema:
              schema:
                $ref: '#/components/schemas/ArrayOfMoodEntries'
        "400":
          description: "Invalid something somethinng"
  /api/search/mood:
    get:
      tags:
      - search
      summary: Find entries by mood
      description: Multiple status values can be provided with comma separated strings
      operationId: findEntriesByMood
      parameters:
      - name: find
        in: query
        description: Mood values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - happy
            - neutral
            - unhappy
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoodEntry'
        400:
          description: Invalid mood value
          content: {}
  /api/search/tags:
    get:
      tags:
      - search
      summary: Find entries by tags
      description: Muliple tags can be provided with comma separated strings. Use         tag1,
        tag2, tag3 for testing.
      operationId: findEntriesByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoodEntry'
        400:
          description: Invalid tag value
          content: {}
        
  /api/statistics/mood:
    get:
      tags:
      - statistics
      summary: Retrieve statistics on mood
      description: Muliple tags can be provided with comma separated strings. Use         tag1,
        tag2, tag3 for testing.
      operationId: statisticsOnMood
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoodEntry'
        400:
          description: Invalid tag value
          content: {}
        
  /api/statistics/time:
    get:
      tags:
      - statistics
      summary: Retrieve statistics on timestamps
      description: Muliple tags can be provided with comma separated strings. Use         tag1,
        tag2, tag3 for testing.
      operationId: statisticsOnTime
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoodEntry'
        400:
          description: Invalid tag value
          content: {}
    
  /api/statistics/tags:
    get:
      tags:
      - statistics
      summary: Retrieve statistics on tags
      description: Muliple tags can be provided with comma separated strings. Use         tag1,
        tag2, tag3 for testing.
      operationId: statisticsOnTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoodEntry'
        400:
          description: Invalid tag value
          content: {}
        
components:
  schemas:
    BaseMood:
      type: object
      properties:
        value:
          type: string
          example: happy
          enum:
          - happy
          - neutral
          - unhappy
    Tag:
      type: object
      properties:
        name:
          type: string
          description: Tag mood entries
          example: excited
    ArrayOfMoodEntries:
      type: array
      items:
          $ref: '#/components/schemas/MoodEntry'
    MoodEntry:
      required:
      - id
      - mood
      - description
      - tags
      - timestamp
      type: object
      properties:
        id:
          type: number
          description: Entry ID
          example: 12
        mood:
          $ref: '#/components/schemas/BaseMood'
        description:
          type: string
          description: notes on mood that further describe it
          example: asked for a raise and got it
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          example: excited, in love
        timestamp:
          type: string
          format: date-time
          description: Date and time of entry
      xml:
        name: Pet