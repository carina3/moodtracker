openapi: 3.0.1
info:
  title: Mood Tracker
  description: 'This is a sample server Petstore server.  You can find out more about     Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For
    this sample, you can use the api key `special-key` to test the authorization     filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: http://localhost:8080/
- url: http://petstore.swagger.io/v2
tags:
- name: moodEntry
  description: Information about your mood
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: store
  description: Access to Petstore orders
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /moodEntry/{entryId}:
    put:
      tags:
      - moodEntry
      summary: Update an existing mood entry
      description: Only logged-in users can update entries
      operationId: updateMoodEntry
      parameters:
      - name: entryId
        in: path
        description: Entry to update
        required: true
        schema:
          type: number
      requestBody:
        description: Mood object that needs to be added to the mood database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoodEntry'
        required: true
      responses:
        400:
          description: Invalid entry ID supplied
          content: {}
        404:
          description: Entry not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body
  /moodEntry:
    get:
        tags:
        - moodEntry
        summary: Retrieve all mood entries from database
        operationId: getAllEntries
        responses:
          "200":
            description: "Successful operation"
            content:
              application/schema:
                schema:
                  $ref: '#/components/schemas/ArrayOfMoodEntries'
          "400":
            description: "Invalid something somethinng"
        security:
        - petstore_auth:
          - "write:pets"
          - "read:pets"
    post:
      tags:
      - moodEntry
      summary: Add a new mood entry to the database
      operationId: addMoodEntry
      requestBody:
        description: MoodEntry object that needs to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoodEntry'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body
  /moodEntry/findByMood:
    get:
      tags:
      - moodEntry
      summary: Find entries by mood
      description: Multiple status values can be provided with comma separated strings
      operationId: findEntriesByMood
      parameters:
      - name: mood
        in: query
        description: Mood values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - happy
            - neutral
            - unhappy
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoodEntry'
        400:
          description: Invalid mood value
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /moodEntry/findByTags:
    get:
      tags:
      - moodEntry
      summary: Find entries by tags
      description: Muliple tags can be provided with comma separated strings. Use         tag1,
        tag2, tag3 for testing.
      operationId: findEntriesByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoodEntry'
        400:
          description: Invalid tag value
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /store/inventory:
    get:
      tags:
      - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
      - api_key: []
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    BaseMood:
      type: object
      properties:
        value:
          type: string
          example: happy
          enum:
          - happy
          - neutral
          - unhappy
    Tag:
      type: object
      properties:
        name:
          type: string
          description: Tag mood entries
          example: 
    ArrayOfMoodEntries:
      type: array
      items:
          $ref: '#/components/schemas/MoodEntry'
    MoodEntry:
      required:
      - id
      - mood
      - description
      - tags
      - timestamp
      type: object
      properties:
        id:
          type: number
          description: Entry ID
          example: 12
        mood:
          $ref: '#/components/schemas/BaseMood'
        description:
          type: string
          description: notes on mood that further describe it
          example: asked for a raise and got it
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        timestamp:
          type: string
          format: date-time
          description: Date and time of entry
      xml:
        name: Pet
    User:
      type: "object"
      properties:
        id:
          type: number
          format: "int64"
        username:
          type: "string"
        password:
          type: "string"
          format: password
      
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
